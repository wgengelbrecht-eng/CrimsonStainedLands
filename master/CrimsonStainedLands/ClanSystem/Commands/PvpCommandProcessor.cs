using CrimsonStainedLands.World;
using Microsoft.AspNetCore.Mvc.ApiExplorer;
using Org.BouncyCastle.Security;
using System.Text.RegularExpressions;

namespace CrimsonStainedLands.ClanSystem
{
    public static class PvpDoFunction
    {
        public static void doPvp(Character ch, string arguments)
        {
            if (getNextArg(arguments, out string nextArg, out string remainingArgs))
            {
                switch (nextArg)
                {
                    case "help":
                        {
                            PvpHelp(ch, remainingArgs);
                            break;
                        }
                    case "list":
                        {
                            PvpListPvpRooms(ch, remainingArgs);
                            break;
                        }
                    case "add_room":
                        {
                            if (ch.Level >= GameSettings.MinLevelRequiredForClanCreation)
                            {
                                PvpAddRoom(ch, remainingArgs);
                            }
                            break;
                        }
                    case "remove_room":
                        {
                            if (ch.Level >= GameSettings.MinLevelRequiredForClanCreation)
                            {
                                PvpRemoveRoom(ch, remainingArgs);
                            }
                            break;
                        }
                    default:
                        {
                            ch.send("That is not a PvP command.");
                            break;
                        }
                }
            }
            else // Only pvp was entered as a command, hench quick switch between pvp modes, on, off
            {
                if (PvpService.SetPlayerPvpFlag(ch.Name))
                {
                    if (PvpService.IsPlayerPvpFlagOn(ch.Name, out string clanName))
                    {
                        ch.send($"PvP flag is now \\RON\\x {PvpNarratorMsgService.GetRandomPvpOnMsg()}");
                    }
                    else
                    {
                        ch.send($"PvP flag is now \\GOFF\\x {PvpNarratorMsgService.GetRandomPvpOffMsg()}");
                    }
                }
            }

            // Send any error msgs generated by Pvp Service to user 
            // to explain why certain actions did not work
            string msgsToUser = "";
            msgsToUser += PvpService.GetErrorMsgsAndClearBuffer(); //Calling this forces the buffer to clear for next loop
            if (msgsToUser != "")
            {
                ch.send(msgsToUser);
            }
        }


        //--------------------- Class PvpCommandProcessor helper functions
        public static bool getNextArg(string arguments, out string nextArg, out string remainingArgs)
        {
            nextArg = "";
            remainingArgs = "";

            string pattern = @"'[^']+'|[^ ]+";
            var matches = Regex.Matches(arguments, pattern);

            List<string> args = matches.Cast<Match>().Select(m => m.Value).ToList();

            if (args.Count > 0)
            {
                nextArg = args[0].Replace("'", "");
                if (args.Count >= 1)
                {
                    args.RemoveAt(0);
                    remainingArgs = string.Join(" ", args);
                }
                return true;
            }
            return false;
        }

        private static void PvpAddRoom(Character ch, string arguments)
        {
            if (getNextArg(arguments, out string roomVnum, out string remainingArgs))
            {
                bool success = int.TryParse(roomVnum, out int roomVnumber);
                if (success)
                {
                    if (PvpService.IsRoomInPvpEnabledRoomList(roomVnumber))
                    {
                        ch.send("That room is already in the PvP enabled room list.");
                        return;
                    }

                    RoomData curRoom;
                    if (RoomData.Rooms.TryGetValue(roomVnumber, out curRoom))
                    {
                        var room = new PvpEnabledRoom
                        {
                            RoomVnum = roomVnumber,
                        };
                        PvpService.addPvpRoom(room);
                        ch.send($"The following room vnum was added: \\r{curRoom.Name}\\x located in the vacinity of \\b{curRoom.Area.Name}\\x");
                    }
                    else
                    {
                        ch.send("That room does not exist.");
                    }
                }
                else
                {
                    ch.send("That is not a number.");
                }
            }
            else
            {
                ch.send("No Vnum was given.");
            }
        }

        private static void PvpRemoveRoom(Character ch, string arguments)
        {
            if (getNextArg(arguments, out string roomVnum, out string remainingArgs))
            {
                bool success = int.TryParse(roomVnum, out int roomVnumber);
                if (success)
                {
                    if (!PvpService.IsRoomInPvpEnabledRoomList(roomVnumber))
                    {
                        PvpService.removePvpRoom(roomVnumber);
                    }
                    else
                    {
                        ch.send("That room is not in the PvP enabled rooms list.");
                    }
                }
                else
                {
                    ch.send("That is not a number.");
                }
            }
            else
            {
                ch.send("No Vnum was given.");
            }
        }

        private static void PvpListPvpRooms(Character ch, string arguments)
        {

            string list = PvpService.GetListPvpEnabledRooms();
            if (list != "")
            {
                string firstLine = "Here is the list of currently available PvP enabled rooms.\n";
                firstLine += list;
                ch.send(firstLine);
            }
            else
            {
                ch.send("There are currently no PvP enabled rooms.");
            }
        }

        private static void PvpHelp(Character ch, string arguments)
        {
            string helpMsgForAdmins = $"Here follows the pvp commands for admin players.\n" +
                                        $"\\g{"list",-30}\\x| {"List all pvp rooms.",-100}\n" +
                                        $"\\g{"pvp",-30}\\x| {"Quick switch between PvP modes.",-100}\n" +
                                        $"{"",-30}| {"\\rUsage :\\x pvp",-100}\n" +
                                        $"\\g{"add_room",-30}\\x| {"Add a room to the quick access PvP enabled rooms",-100}\n" +
                                        $"{"",-30}| {"\\rUsage :\\x pvp add_room 'room vNum'",-100}\n" +
                                        $"\\g{"remove_room",-30}\\x| {"Remove a room from the quick access Pvp enabled rooms",-100}\n" +
                                        $"{"",-30}| {"\\rUsage :\\x pvp remove_room 'room vNum'",-100}\n";

            string helpMsgForAll = $"Here follows the pvp commands for admin players.\n" +
                                        $"\\g{"list",-30}\\x| {"List all pvp rooms.",-100}\n" +
                                        $"\\g{"pvp",-30}\\x| {"Quick switch between PvP modes.",-100}\n";

            if (ch.Level >= GameSettings.MinLevelRequiredForClanCreation)
            {
                ch.send(helpMsgForAdmins);
            }
            else
            {
                ch.send(helpMsgForAll);
            }                              
        }
    }

}